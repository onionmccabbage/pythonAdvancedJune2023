Review 3
========

Client Server (Miroservices):
-----------------------------
Return to the client and server modules
In the server, check if the buffer is one of 'users', 'posts', 'todos', 'photos' or 'albums'
If so, fetch the relevant data set from jsonplaceholder and return it to the client

Find a way for the client to specify a category AND an id
(If a valid category is not passed, just echo back as before)

Adapt the client so it checks to see if a valid category and id have been injected as system argument variables
If not, ask for a category and an id number from the clients user, then passes these to the server

The server then requests 'https://jsonplaceholder.typicode.com/<category>/<id>'
and sends the response back to the client

Make the server write a text or byte log file of every request it receives

Optional
--------
Write a new server (a microservice) as a front-end to your database from yesterday.
The client should send requests for specific creatures and the server responds by 
querying the database and returning a nicely formatted response about that creatures
Then find a way for the client to add or update members of the database
The client should also persist results as bytefiles

Alternatively
-------------
Write a Flask server as a front end to your database, with these routes:
 - fetch all creatures
 - fetch one creatures
 - update the quantity of one creature
 Add handlers for 404 not found route






